<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Windows.Forms.WebControl">
            <summary>
            Represents a Windows Forms control that wraps an Awesomium web-view.
            You can use it to embed Awesomium directly in your WinForms application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:Awesomium.Core.WebCore"/>.
            <c>WebControl</c> takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. The <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.Forms.Control.Enabled"/> Property:</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.Forms.Control.Enabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently enabled.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.Forms.Control.Enabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <h4>The Role of the <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/> Property:</h4>
            A <see cref="T:Awesomium.Windows.Forms.WebControl"/> is considered invalid when it is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Forms.WebControl.Dispose(System.Boolean)"/> and <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Forms.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            <note type="caution">
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            </note>
            <note>
            <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/> also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCreateSurface(Awesomium.Core.CreateSurfaceEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.CreateSurface"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectionChanged(Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectionComplete(Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectionComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnProcessCreated(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ProcessCreated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnInitializeView(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnNativeViewInitialized(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.NativeViewInitialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnWindowClose(Awesomium.Core.WindowCloseEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.WindowClose"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowJavascriptDialog(Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrinting(Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.Printing"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnJavascriptRequest(Awesomium.Core.JavascriptRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.JavascriptRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnJavascriptMessage(Awesomium.Core.JavascriptMessageEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.JavascriptMessage"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnTitleChanged(Awesomium.Core.TitleChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnAddressChanged(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.AddressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnToolTipChanged(Awesomium.Core.ToolTipChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnTargetURLChanged(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.TargetURLChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCursorChanged(Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnFocusChanged(Awesomium.Core.FocusChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.FocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnConsoleMessage(Awesomium.Core.ConsoleMessageEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ConsoleMessage"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowCreatedWebView(Awesomium.Core.ShowCreatedWebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDocumentReady(Awesomium.Core.DocumentReadyEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.DocumentReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadingFrame(Awesomium.Core.LoadingFrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadingFrameFailed(Awesomium.Core.LoadingFrameFailedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadingFrameComplete(Awesomium.Core.FrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadingFrameComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectLocalFiles(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoginRequest(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCertificateError(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.CertificateError"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrintRequest(Awesomium.Core.PrintRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.PrintRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrintFailed(Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.PrintFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrintComplete(Awesomium.Core.PrintCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.PrintComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowPopupMenu(Awesomium.Core.PopupMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowPopupMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowContextMenu(Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowPageInfo(Awesomium.Core.PageInfoEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowPageInfo"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResponsiveChanged(Awesomium.Core.ResponsiveChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCrashed(Awesomium.Core.CrashedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.VerifyValid">
            <summary>
            Verifies the view is live. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.VerifyValidParent">
            <summary>
            Verifies a windowed IWebView has specified a valid parent window.
            Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.AddSettingHandler(System.String,System.Action)">
            <summary>
            Adds an action to be performed at <see cref="M:Awesomium.Windows.Forms.WebControl.ApplyDesignTimeSettings"/>.
            </summary>
            <param name="property">The property the action is supposed to set.</param>
            <param name="handler">Delegate of the action.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ApplyDesignTimeSettings">
            <summary>
            Should be called by <see cref="T:Awesomium.Core.IWebView"/> components,
            right after the underlying view has been created.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InitializeStandard">
            <summary>
            Standard initialization of views.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ClearStandard">
            <summary>
            Performs standard actions when a view closes. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoginRespond(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Login response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CertificateErrorRespond(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            CertificateError response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ChooseFilesRespond(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Select local files helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            Specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <remarks>
            Several <see cref="T:Awesomium.Core.IWebView"/> features can be accessed through services. This
            is because the availability of these features depends on the current state or
            the type (see <see cref="T:Awesomium.Core.WebViewType"/>) of the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            Here is a list of services currently available:
            <list type="table">
            <listheader>
            <term>Service Type</term>
            <description>Availability</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Core.IWebViewIMEComposition"/></term>
            <description>
            Only available when <see cref="P:Awesomium.Core.IWebView.ViewType"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary><param name="html">
            The HTML string (ASCII) to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary><param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary><param name="ignoreCache">
            Indicates if cached resources should be ignored when reloading.
            When this is <c>true</c>, all resources will be reloaded from the server.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary><returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary><returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary><returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns><seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/><seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><param name="name">
            The name of the object as it will appear in JavaScript.
            </param><returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns><remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="O:Awesomium.Core.JSObject.Bind"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note>
            You can create global Javascript objects on a view, as soon as it goes <i>live</i>. (<see cref="P:Awesomium.Core.IWebView.IsLive"/> is
            <c>true</c>). On technology specific <c>WebControls</c>, you should wait for the <see cref="E:Awesomium.Core.IWebView.NativeViewInitialized"/>
            event. <see cref="T:Awesomium.Core.WebView"/> components go live immediately after creation.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>.
            </exception><exception cref="T:System.ArgumentException">
            The specified <paramref name="name"/> is reserved. It either represents an HTML DOM object, 
            or an object variable already available in the page. Use <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/> 
            after <see cref="E:Awesomium.Core.IWebView.DocumentReady"/>, to obtain this object.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">The x-coordinate.</param><param name="y">The y-coordinate.</param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SaveImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to download an image at the specified coordinates in the page.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">
            An x-coordinate within an image in the page.
            </param><param name="y">
            A y-coordinate within an image in the page.
            </param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            <p/>
            This method will attempt to download the image at the specified coordinates,
            directly from the server. In technology-specific WebControls, a <b><i>Save As</i></b>
            dialog will be shown in response to the download request.
            <p/>
            If you are using the <i>headless</i> <see cref="T:Awesomium.Core.WebView"/> component, you will have to 
            handle <see cref="E:Awesomium.Core.WebCore.Download"/> to either display a dialog or silently save
            the resource. More appropriately in this case, you should assign your implementation
            of <see cref="T:Awesomium.Core.IWebViewPresenter"/> to <see cref="P:Awesomium.Core.WebView.Presenter"/>, to handle 
            UI related events including <see cref="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)"/>.
            </remarks><returns>
            <c>true</c> if a download operation for an image at the specified coordinates,
            was successfully triggered; <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.WebCore.Download"/><seealso cref="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)"/><seealso cref="M:Awesomium.Core.IWebView.CopyImageAt(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary><param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param><param name="config">
            The configuration settings to use.
            </param><returns>
            Returns a unique request identifier that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.IO.DirectoryNotFoundException">
            The specified output directory <paramref name="outputDirectory"/>, does not exist.
            </exception><exception cref="T:System.ArgumentException">
            <paramref name="outputDirectory"/> is a zero-length string, contains only white space, or contains one
            or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. -OR- 
            The system could not retrieve the absolute path.
            </exception><exception cref="T:System.Security.SecurityException">
            The caller does not have the required permissions.
            </exception><exception cref="T:System.ArgumentNullException">
            <paramref name="outputDirectory"/> is <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception><exception cref="T:System.NotSupportedException">
            <paramref name="outputDirectory"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\").
            </exception><exception cref="T:System.IO.PathTooLongException">
            The acquired full path to the specified <paramref name="outputDirectory"/>, exceeds the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.
            </exception><seealso cref="T:Awesomium.Core.PrintConfig"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ZoomIn">
            <summary>
            Zooms into the page by <c>20%</c>.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ZoomOut">
            <summary>
            Zooms out the page by <c>20%</c>.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ResetZoom">
            <summary>
            Resets the zoom level for the currently loaded host.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RequestPageInfo">
            <summary>
            Issues a request for the currently loaded page's security
            info. Information will be retrieved through the 
            <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ReduceMemoryUsage">
            <summary>
            Forces V8 to release as much memory as possible (collects garbage, dumps
            cached structures, etc) and also clears WebKit cache. This helps to
            reduce memory accumulated within the process associated with this view.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.WebConfig.ReduceMemoryUsageOnNavigation"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CreateJavascriptExecutionContext``1(Awesomium.Core.JavascriptExecutionContextMethod{``0},``0)">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext{T}&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CreateJavascriptExecutionContext(Awesomium.Core.JavascriptExecutionContextMethod)">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebControl"/> class.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebControl"/> class, 
            associating it with a container.
            </summary>
            <param name="container">
            An object implementing <see cref="T:System.ComponentModel.IContainer"/> to associate with this instance.
            </param>
            <remarks>
            <note>
            This constructor is usually used by the Windows Forms designer.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnHandleCreated(System.EventArgs)">
            <inheritdoc/>
            <remarks>
            Initialization of the <see cref="T:Awesomium.Core.WebCore"/> (if needed)
            and of the underlying web-view, occurs after the control's
            handle is created.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)">
            <inheritdoc/>
            <remarks>
            In addition to its regular meaning, the <see cref="P:System.Windows.Forms.Control.Enabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently active.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.Forms.Control.Enabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)"/>, then set <see cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
            manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResize(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnGotFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLostFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.HandleInput(Awesomium.Core.ViewInput)">
            <summary>
            Gets if the specified kind of input should be handled by the control.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Forms.WebControl"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Forms.WebControl"/> itself).
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Forms.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="button">
            The mouse button that was pressed.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Forms.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="button">
            The mouse button that was released.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Forms.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Forms.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:Awesomium.Core.WebKeyboardEvent"/>, yourself.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Forms.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectTouchEvent(Awesomium.Core.WebTouchEvent)">
            <summary>
            Injects a multi-touch event.
            </summary>
            <param name="touchEvent">
            A <see cref="T:Awesomium.Core.WebTouchEvent"/> instance representing the multi-touch event to inject.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Forms.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RaisePropertyChanged(System.String,System.Int32)">
            <summary>
            Helper method to raise a delayed <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
            <param name="updateCycles">
            The number of <see cref="M:Awesomium.Core.WebCore.Update"/> cycles to wait till the event is fired.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectionComplete">
            <summary>
            Occurs when selecting content in the current page, completes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.InitializeView">
            <summary>
            Occurs when the underlying web-view of a <c>WebControl</c>is about to be instantiated and wrapped or, 
            for child views created in response to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, the native view assigned to 
            the <c>NativeView</c> property of a <c>WebControl</c>, is about to be wrapped.
            </summary><remarks>
            This is the last moment for setting any of the following properties, on a <c>WebControl</c>:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Properties
            </description>
            </listheader>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            These properties are implemented as read-write properties on <c>WebControls</c> and
            can only be set before the underlying web-view of a <c>WebControl</c> is created,
            or a previously created native view is wrapped (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            <p/>
            Right after this event is fired, the <c>WebControl</c> goes live (<see cref="P:Awesomium.Core.IWebView.IsLive"/>
            is set to <c>true</c>) and these properties can no longer be changed.
            <note type="caution">
            Attempting to set some of the above properties after a <c>WebControl</c> is live,
            is usually silently ignored but may also throw an exception. For details, refer to the
            documentation of the properties.
            </note>
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately at creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.NativeViewInitialized">
            <summary>
            Occurs when the native underlying web-view of a <c>WebControl</c>, has been initialized.
            </summary><remarks>
            This event occurs right after <see cref="P:Awesomium.Core.IWebView.IsLive"/> is set to <c>true</c> and 
            also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately after creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.WindowClose">
            <summary>
            Occurs when Javascript in the page calls <c>window.close</c>.
            </summary><remarks>
            You can ignore this event, or respond depending on the current context.
            For example, if the page is open in the main window of an application
            or a tab, browsers display a confirmation dialog asking the user if he
            wants to acknowledge the page's request.
            <p/>
            If the page is open in a popup window, browsers usually respect the
            request and close the popup window, without any confirmation from the user.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowJavascriptDialog">
            <summary>
            Occurs when a JavaScript call that requires the creation of a modal dialog, is called.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Printing">
            <summary>
            Occurs when a printing operation has started.
            </summary><remarks>
            This event occurs:
            <list type="bullet">
            <item>
            <description>
            On any <see cref="T:Awesomium.Core.IWebView"/> instance, right after a call to <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>.
            </description>
            </item>
            <item>
            <description>
            On technology specific <c>WebControls</c>, right after a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> 
            event that has not been handled, or canceled (either programmatically or by canceling the 
            <i>Select Folder</i> dialog).
            </description>
            </item>
            </list>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.JavascriptRequest">
            <summary>
            Occurs when a JavaScript client sends a management request through
            <see cref="T:global.OSMJIF"/> (such as <see cref="M:global.OSMJIF.minimize(global.Multiple)"/>, 
            <see cref="M:global.OSMJIF.maximize(global.Multiple)"/> etc.).
            </summary><remarks>
            The request sent is identified by <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.Request"/>.
            <p/>
            A request token can be passed by JavaScript clients to the native application and
            it's received through <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs.RequestToken&quot;]/remarks/node()"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs&quot;]/remarks/node()"/>
            <p/>
            Unless the request originates from a page that has been created by the application
            (such as pages provided though a <see cref="T:Awesomium.Core.Data.DataSource"/>), applications should be careful
            when handling management requests. For example, a <see cref="M:global.OSMJIF.exit(global.Multiple)"/>
            command asks from the native application to exit immediately. The <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            is provided so that native applications can validate such requests.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.JavascriptMessage">
            <summary>
            Occurs when a JavaScript client sends a message through <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            or <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>.
            </summary><remarks>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> and the asynchronous
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>, 
            can be used instead of creating and binding to custom methods of a global JavaScript object
            created with <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>.
            <p/>
            Unlike regular <b>synchronous</b> custom JavaScript methods created by the managed application
            through <see cref="O:Awesomium.Core.JSObject.Bind"/> or using the Dynamic Language Runtime (DLR),
            <b><see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> allows callers to pass 
            JavaScript objects to the <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> array, even though the method 
            is called synchronously</b> (see <a href="http://wiki.awesomium.net/javascript/sync_async_js_api.html">Synchronous &amp; Asynchronous API</a>).
            <p/>
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> are being serialized,
            any function members (methods) are stripped out and they are deserialized to the hosting
            application as local JSObjects. Nevertheless, the objects are still passed by reference.
            <b>Any changes applied to passed objects in the handler of a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>
            event, will be reflected back to the original remote instances when <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            returns</b>.
            <p/>
            <note type="note">
            Function members (methods) of objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>,
            are being stripped out when the object is passed to the hosting application (calling them from the hosting
            application would cause a deadlock). However this does not affect the original client-side instances.
            </note>
            <note type="caution">
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>, are serialized
            and deserialized using JSON. Objects whose structure includes a circular reference, cannot be passed.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.AddressChanged">
            <summary>
            Occurs when the page URL has changed, usually after navigation to a new
            URL has started.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            <note>
            When setting <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>
            to handle tooltips yourself, you should expect an empty string passed
            to <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> and in response to it,
            hide your tooltip (if any).
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ConsoleMessage">
            <summary>
            Occurs when a message is added to the console on the page.
            This is usually the result of a JavaScript error being encountered
            on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link).
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance creates a new child view 
            (usually the result of <c>window.open</c>, clicking on a link with <c>target="_blank"</c> or submitting a <c>form</c>
            with <c>target="_blank"</c>). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <p/>
            <note>
            The <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event must always be handled in your application to wrap views created by
            Awesomium in response to users clicking a link or JavaScript <c>window.open</c> calls.
            <p/>
            If you don't handle this event, the unused web-view instance will be immediately destroyed.
            </note>
            There are a number of facts you need to take into consideration, before taking the appropriate actions in response 
            to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. The following list presents these facts and some general suggestions:
            <list type="bullet">
            <item>
            <description>
            The created child view, has the same type (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) and is assigned to the same session
            (see <see cref="P:Awesomium.Core.IWebView.WebSession"/>) as its parent (opener) view. Therefore, you should not attempt to set these 
            properties if you are wrapping the new child view with a technology specific <c>WebControl</c>.
            </description>
            </item>
            <item>
            <description>
            In order to maintain the relationship with their parent view, child views execute and render under 
            the same process (<c>awesomium_process</c>) as their parent view. If for any reason the child process crashes,
            all views related to it will be affected.
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of a Javascript <c>window.open</c>,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b> the created child view instance
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to maintain the parent-child window relationship (the child page can access
            the parent through the <c>window.opener</c> property; the parent can manipulate the child through the
            <c>window</c> object returned from the <c>window.open</c> call, which is why <c>window.open</c> was most
            probably used in the first place).
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b>
            the created child view instance (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to allow <c>POST</c> data be properly passed.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>, it most possibly indicates that the event is the result of
            a user clicking on a link with <c>target="_blank"</c>. Since maintaining a parent-child relationship is not important
            in this scenario, <b>you should cancel the event</b> by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> (this tells the core 
            to destroy the unused web-view instance), then create a new <see cref="T:Awesomium.Core.WebView"/> (using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>)
            or <c>WebControl</c> and navigate to the provided <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any. This allows you to take advantage
            of the isolated process architecture of Awesomium and let each view be rendered in a separate process.
            <note type="caution">
            Failing to cancel the event when you are not wrapping the new child view instance, will keep the native instance alive until 
            the <see cref="T:Awesomium.Core.WebCore"/> is shut down. This can result in numerous unused views being spawned, but never actually used.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, 
            is already queued on the created child view. Therefore you should not attempt to set the <see cref="P:Awesomium.Core.IWebView.Source"/> when you 
            are wrapping the child view, as this would again break the parent-child relationship (<c>window.opener</c> on the child page and the 
            <c>window</c> object returned from the <c>window.open</c> call on the parent page, will be rendered invalid) or prevent passing
            <c>POST</c> data to the server respectively.
            <note>
            Also note that since navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, has already started by the moment the child
            view is wrapped, <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> will not be fired for the main frame of the new <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </note>
            </description>
            </item>
            <item>
            <description>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, is blocked on the created child view, when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> and 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>. As applications will generally choose to cancel the event and create a new <see cref="T:Awesomium.Core.IWebView"/> 
            instance to navigate to the target URL (or even choose to navigate to the target URL on the same <see cref="T:Awesomium.Core.IWebView"/> instance that 
            fired the event), Awesomium.NET does this to prevent <i>false hits</i> to the target URL, that would have occurred by the time the 
            event handler returns and the unused child view instance, is destroyed. What's more, users may also implement 
            <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>). Therefore, if your application chooses to wrap the created 
            child view even though it is most possibly the result of a user clicking on a link with <c>target="_blank"</c> or navigation
            to the target URL has already been canceled by an <see cref="T:Awesomium.Core.IResourceInterceptor"/> (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>), 
            you should in this scenario only, after wrapping the child view, set the <see cref="P:Awesomium.Core.IWebView.Source"/> property to 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to resume navigation to the target URL.
            <note>
            Applications can occasionally choose to wrap a child view even when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>false</c> or 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, if they want to apply a <i>single process</i> architecture where all new 
            views created will be rendered by the same <c>awesomium_process</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> returns a valid, initialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
            instance. This may be initialized to default values if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>false</c>, or reflect the <i>specs</i> 
            specified to the <c>window.open</c> call, if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>.
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, applications should generally wrap and present the native view in a new popup application
            window. This window should have the size and location specified in <see cref="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition"/>, <b>if this is not
            empty</b>. They should also respect the rest of the specs available through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when creating
            the new application window that will host the child view.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is always also <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> will only be <c>true</c>, if <i>specs</i> were specified to the <c>window.open</c> call. These can be
            standard specs such as <c>width=400,height=400,menubar=no</c>, only user defined, non-standard specs such as <c>background=black</c>
            or a combination of both. These specs are available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> property.
            </description>
            </item>
            <item>
            <description>
            If only user defined, non-standard <i>specs</i> were specified to the <c>window.open</c> call, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will
            be <c>true</c>. In this scenario, if your application does not recognize user defined, non-standard specs, it can ignore the 
            value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> all together and wrap the new child view in a regular new application window, tab or control.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/> returns an array of <see cref="T:Awesomium.Core.UploadElement"/>,
            representing the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> using <c>POST</c>.
            </description>
            </item>
            <item>
            <description>
            Finally note that only an empty <i>name</i> parameter or a <c>_blank</c> target attribute specified as the <i>name</i> parameter 
            in a <c>window.open</c> call or in a link or <c>form</c>, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. Other target 
            attributes (such as <c>_top</c>), passed to either a <c>window.open</c> call, a link or a <c>form</c>, are handled by Awesomium internally.
            </description>
            </item>
            </list>
            <note type="caution">
            Several members of <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>, may not return valid values if Javascript is disabled.
            For details, read the documentation of: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>.
            </note>
            Given the facts and suggestions presented before, if your application is about to wrap the created child view, the following 
            table shows the methods available, to wrap the created child view using any of the <b>Awesomium.NET</b> web-view components:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Method and Notes
            </description>
            </listheader>
            <item>
            <term>
            Core
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Pass <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>
            to wrap the new view with a <see cref="T:Awesomium.Core.WebView"/>.
            </description>
            </item>
            <item>
            <description>
            For <i>windowed</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>), you should now assign a <see cref="P:Awesomium.Core.WebView.ParentWindow"/>.
            <i>Offscreen</i> views have a <see cref="T:Awesomium.Core.BitmapSurface"/> assigned by default but depending on your application's design,
            you may have to assign a new <see cref="T:Awesomium.Core.ISurface"/> by either monitoring the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event, 
            or setting the <see cref="P:Awesomium.Core.IWebView.Surface"/> property.
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Core.WebView"/> to match its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Controls.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Controls.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Controls.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by binding the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property
            in XAML (see examples in the <b>Awesomium.NET Samples</b> solution available with the SDK), or by monitoring the 
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Controls.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Forms.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Forms.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Forms.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by assigning the <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property
            right after the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is created (see examples in the <b>Awesomium.NET Samples</b> solution available 
            with the SDK),or by monitoring the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Forms.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks><example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView, AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/><seealso cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><remarks>
            
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame usually finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> 
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event either <b>modally</b> or <b>non-modally</b>. 
            <b>Only default or modal handling is officially supported by Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>.
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the above <see cref="T:Awesomium.Core.IWebView"/>
            member, is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            <note type="caution">
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
             No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CertificateError">
            <summary>
            Occurs when an SSL certificate error is encountered while attempting to navigate
            to a new address.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event is handled, 
            when <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), navigation to the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/> will be canceled
            due to the SLL certificate error.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/> property, 
            <b>before</b> the event handler exits.
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the error and navigation to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>
            will be canceled, unless you call <see cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>.
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this method.
            </note>
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <p/>
            Optionally, you can easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowPageInfo">
            <summary>
            Occurs in response to a <see cref="M:Awesomium.Core.IWebView.RequestPageInfo"/>
            call, requesting for the page's security related information.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary><remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/><seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Title"/><seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary><remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary><remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary><seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary><returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns><seealso cref="T:Awesomium.Core.WebContextMenuInfo"/><seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ProcessId">
            <summary>
            Gets the identifier for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no rendering process currently associated (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <note>
            This is not a unique identifier for the <see cref="T:Awesomium.Core.IWebView"/> instance.
            A child, rendering process can host more than one views
            (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            </note>
            <note>
            This does not correspond to the system-wide id of the associated
            <see cref="P:Awesomium.Core.IWebView.RenderProcess"/> (PID). It's an Awesomium-specific identifier.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Identifier">
            <summary>
            Gets a unique global identifier for this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            When this <see cref="T:Awesomium.Core.IWebView"/> instance is <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>),
            this identifier is guaranteed to be unique among all <see cref="T:Awesomium.Core.IWebView"/>
            instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            <note>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no rendering process currently associated (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ProcessHandle">
            <summary>
            Gets the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.RenderProcess">
            <summary>
            Gets the rendering process associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This represents the executing <i><c>awesomium_process</c></i> or the one specified through 
            <see cref="P:Awesomium.Core.WebConfig.ChildProcessPath"/> at <see cref="T:Awesomium.Core.WebCore"/> initialization.
            </summary><remarks>
            This may not be initialized until some time after the view is actually created 
            (when we receive the first IPC message from the child-process). It may also return
            <c>null</c> (<c>Nothing</c> in Visual Basic), is there is no rendering process
            associated yet (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>) or the process has crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <p/>
            The associated <see cref="P:Awesomium.Core.IWebView.RenderProcess"/> will be terminated when this <see cref="T:Awesomium.Core.IWebView"/>
            instance is disposed and destroyed.
            <p/>
            The default priority of the <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>, is <see cref="F:System.Diagnostics.ProcessPriorityClass.Normal"/>.
            This may be automatically lowered to <see cref="F:System.Diagnostics.ProcessPriorityClass.BelowNormal"/> when
            <see cref="P:Awesomium.Core.IWebView.IsRendering"/> is <c>false</c>.
            <note>
            In a technology-specific <c>WebControl</c>, <see cref="P:Awesomium.Core.IWebView.IsRendering"/> and the priority of
            the <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>, are associated to the control's <i>enabled</i> status.
            </note>
            <note type="caution">
            Actions that may corrupt the execution state of the rendering process, will directly affect
            view's web content rendering. Manually killing this process, will mark the view as crashed 
            (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            </note>
            </remarks><seealso cref="P:Awesomium.Core.IWebView.ProcessHandle"/><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsJavascriptEnabled">
            <summary>
            Gets is Javascript is enabled on this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            Javascript status is defined by setting the <see cref="P:Awesomium.Core.WebPreferences.Javascript"/> property when
            defining the preferences of the <see cref="T:Awesomium.Core.WebSession"/> this view will be member of.
            <p/>
            Javascript is enabled by default when using the default <see cref="T:Awesomium.Core.WebSession"/>,
            or if no preferences or the default preferences have been specified to a custom <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            Several features depend on Javascript. The following lists, present <b>features that are not available when Javascript is disabled</b>:
            <h4>Methods</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            Attempting to call any of these methods when Javascript is disabled, will throw a <see cref="T:System.InvalidOperationException"/>.
            </note>
            <h4>Events</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.WindowClose"/>
            </description>
            </item>
            </list>
            <note>
            These events will not be fired when Javascript is disabled.
            </note>
            <h4>Properties</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.HasSelection"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Selection"/> will always return <see cref="F:Awesomium.Core.Selection.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.SynchronousMessageTimeout"/> is ignored.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> will always return <see cref="F:Awesomium.Core.JSWindowOpenSpecs.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will always return <c>false</c>.
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/><seealso cref="P:Awesomium.Core.WebPreferences.Javascript"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsPrinting">
            <summary>
            Gets if a printing operation is currently in progress.
            </summary><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CurrentCertificateError">
            <summary>
            Gets the SSL certificate error (if any) reported for the
            page currently loaded. The default is <see cref="F:Awesomium.Core.CertError.None"/>.
            </summary><seealso cref="P:Awesomium.Core.IWebView.HasCertificateError"/><seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasCertificateError">
            <summary>
            Gets if the page currently loaded has an SSL
            certificate error.
            </summary><seealso cref="P:Awesomium.Core.IWebView.CurrentCertificateError"/><seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HTML">
            <summary>
            Gets the HTML code of the currently loaded document.
            </summary><remarks>
            This property is updated after the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event is fired.
            <note type="caution">
            This property returns <c>null</c> (<c>Nothing</c> in Visual Basic), if JavaScript
            is disabled in this view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </note>
            </remarks><seealso cref="P:Awesomium.Core.IWebView.Source"/><seealso cref="M:Awesomium.Core.IWebView.LoadHTML(System.String)"/><seealso cref="E:Awesomium.Core.IWebView.DocumentReady"/><seealso cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CreationTime">
            <summary>
            Indicates the date and time this <see cref="T:Awesomium.Core.IWebView"/> instance was created.
            If the view has not been successfully initialized, this is <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary><remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with <c>style="background-color: transparent;"</c>)
            </summary><remarks>
            When set to <c>true</c>, the alpha channel is premultiplied. When set to <c>false</c>
            (default), the view will have an opaque, white background.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently loaded 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance, or <c>null</c> (<c>Nothing</c>
            in Visual Basic) if not set or updated.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary><returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns><remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.SynchronousMessageTimeout">
            <summary>
            Gets or sets the maximum amount of time (in milliseconds) to wait for a response
            from a synchronous IPC message dispatched to the view's renderer process.
            Default is <c>800</c> (ms). Set this to <c>0</c> to use no timeout.
            </summary><remarks>
            You should increase this if you find that a lot of your synchronous
            method calls keep getting <see cref="F:Awesomium.Core.Error.TimedOut"/> (see <see cref="M:Awesomium.Core.IWebView.GetLastError"/>.
            (Your machine just may be slow at handling IPC calls).
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Zoom">
            <summary>
            Gets or sets the Zoom percentage for the host currently loaded.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname. The value of this property is automatically updated
            when the host currently loaded, changes (see: <see cref="E:Awesomium.Core.IWebView.AddressChanged"/> and <see cref="P:Awesomium.Core.IWebView.Source"/>).
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you set this property.
            </note>
            </remarks><exception cref="T:System.ArgumentOutOfRangeException">
            The minimum accepted value, is <c>1</c>.
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="T:Awesomium.Core.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsSourceView">
            <summary>
            Gets if this is a source view that displays the source of
            loaded pages.
            </summary><remarks>
            The following table presents how to create managed web-view components
            that display the source code of loaded pages:
            <list type="table">
            <listheader>
            <term>
            Component
            </term>
            <description>
            Method
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            Use <see cref="M:Awesomium.Core.WebCore.CreateSourceWebView(System.Int32,System.Int32)"/>.
            </description>
            </item>
            <item>
            <term>
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> (WPF)<br/>
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> (Windows Forms)<br/>
            <see cref="T:Awesomium.Windows.Unity.WebUIComponent"/> (Unity)
            </term>
            <description>
            The <see cref="P:Awesomium.Core.IWebView.IsSourceView"/> property is implemented as read-write
            property on these controls. You have to set the property before
            the control goes <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <p/>
            Either:
            <list type="bullet">
            <item>
            <description>
            Set the property at design-time.
            </description>
            </item>
            </list>
            - OR -
            <list type="bullet">
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.InitializeView"/> event, the last fired
            before the control goes <i>live</i>, to set the property.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            <note>
            You cannot change this property on technology specific web-view controls,
            once they go <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary><remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary><remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            You should set this to <c>false</c> when your surface is not rendering
            the view's pixel buffer (e.g., when a technology specific <c>WebControl</c>
            is not visible) to save some CPU cycles.
            <note>
            Technology specific <c>WebControls</c> usually monitor the control's visibility
            or enabled status and update this property automatically. They may require
            additional steps before you are able to set this property manually. For more
            details, refer to the documentation of each <c>WebControl</c>.
            </note>
            <note>
            When this is <c>false</c>, the associated process's (see <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>)
            priority, is also automatically lowered.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ViewType">
            <summary>
            Gets or sets the type of the underlying <see cref="T:Awesomium.Core.IWebView"/> instance, this control wraps.
            The default value for the Windows Forms <c>WebControl</c> and the MonoMac <c>OSMWebView</c>, 
            is <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            </summary>
            <remarks>
            For details about the various types of a <see cref="T:Awesomium.Core.IWebView"/> instance,
            read the documentation of <see cref="T:Awesomium.Core.WebViewType"/> and its members,
            or the following article: http://wiki.awesomium.net/general-use/introduction-to-web-views.html
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CreateParams">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ForeColor">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ForeColorChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Font">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.FontChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.RightToLeft">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.RightToLeftChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Text">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TextChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.AllowDrop">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CausesValidation">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CausesValidationChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsLive">
            <summary>
            Gets if the underlying web-view this control wraps, is alive.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the underlying web-view this control wraps, 
            is alive. <c>False</c> indicates that the underlying web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Forms.WebControl.Dispose(System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Forms.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            <p/>
            <note>
            This property also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <example>
            <code lang="C#">
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ProcessInput">
            <summary>
            Gets or sets the user input that should be processed by a technology specific <c>WebControl</c>.
            The default is <see cref="F:Awesomium.Core.ViewInput.All"/>.
            </summary><remarks>
            <note>
            This property can only be set on technology-specific controls that wrap an <i>offscreen</i> 
            view (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>). <i>Windowed</i> views process all input by default at native level.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NativeView">
            <summary>
            Gets or sets the handle to the underlying web-view instance.
            </summary>
            <remarks>
            You can use this property to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (See Javascript: <c>window.open</c>).
            <note type="caution">
            Once assigned and the control goes live, this property cannot be changed. Attempting to do so,
            will fail silently.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to wrap a web-view instance that has already been wrapped.
            </exception>
            <seealso cref="E:Awesomium.Windows.Forms.WebControl.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.BorderStyle">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.WebPopupMenu">
            <summary>
            Predefined drop-down (popup) menu used by the <see cref="T:Awesomium.Windows.Forms.WebControl"/> in response
            to <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>.
            </summary>
            <remarks>
            To override or block the default drop-down (popup) menu of a <see cref="T:Awesomium.Windows.Forms.WebControl"/>,
            handle the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowPopupMenu"/> event and set the 
            <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> property to <c>true</c>.
            This will block the default drop-down (popup) menu from displaying. 
            You can then manually display your own drop-down (popup) menu.
            </remarks>
            <seealso cref="T:Awesomium.Core.WebPopupMenuInfo"/>
            <seealso cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebPopupMenu.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebPopupMenu.Show(Awesomium.Core.IWebView,System.Windows.Forms.Control,Awesomium.Core.WebPopupMenuInfo)">
            <summary>
            Positions and shows a <see cref="T:Awesomium.Windows.Forms.WebPopupMenu"/>, 
            relative to the specified <paramref name="control"/>.
            </summary>
            <param name="view">
            The <see cref="T:Awesomium.Core.IWebView"/> to associate this menu with.
            </param>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control"/> instance this <see cref="T:Awesomium.Windows.Forms.WebPopupMenu"/>
            will be positioned relative to.
            </param>
            <param name="info">
            A <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> specifying current popup menu data.
            </param>
            <remarks>
            <note>
            When used with a <see cref="T:Awesomium.Windows.Forms.WebControl"/>, you should pass the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            reference to both <paramref name="view"/> and <paramref name="control"/>
            </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A <c>null</c> reference specified for <paramref name="view"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A <c>null</c> reference specified for <paramref name="control"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebPopupMenu.Hide">
            <summary>
            Sends the currently selected item and closes the drop-down (popup) menu.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebPopupMenu.Hide(System.Boolean)">
            <summary>
            Sends the currently selected item, or cancels and closes the drop-down (popup) menu.
            </summary>
            <param name="cancel">
            <c>true</c> to abort the menu and prevent it from sending the currently selected item;
            <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebPopupMenu.OnClosed(System.Windows.Forms.ToolStripDropDownClosedEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebPopupMenu.MenuInfo">
            <summary>
            Gets the <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> instance used to provide data 
            to the drop-down (popup) menu.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.WebSessionProvider">
            <summary>
            Represents a Windows Forms <see cref="T:Awesomium.Core.WebSession"/> provider, that you can use to assign a WebSession to
            a <see cref="T:Awesomium.Windows.Forms.WebControl"/>, at design-time.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> is a design-time component that should be
            used in the Windows Forms designer. If you are creating a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            programmatically, you should set <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/> manually
            right after creating your <see cref="T:Awesomium.Windows.Forms.WebControl"/> and before it goes <i>live</i>
            (see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>)
            <p/>
            <b>For examples, please read: 
            <a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Forms.WebSessionProvider.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebSessionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> class.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebSessionProvider.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> class, 
            associating it with a container.
            </summary>
            <param name="container">
            An object implementing <see cref="T:System.ComponentModel.IContainer"/> to associate with this instance.
            </param>
            <remarks>
            <note>
            This constructor is usually used by the Windows Forms designer.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebSessionProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebSessionProvider.ProvideValue(Awesomium.Windows.Forms.WebControl)">
            <summary>
            Called when this provider needs to set the <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/>
            property on a <see cref="T:Awesomium.Windows.Forms.WebControl"/> it has been assigned to.
            </summary>
            <param name="view">
            The Windows Forms <see cref="T:Awesomium.Windows.Forms.WebControl"/> that this provider must
            specify a <see cref="T:Awesomium.Core.WebSession"/> for.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebSessionProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebSessionProvider.Preferences">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.WebPreferences"/> to use with the created session.
            </summary>
            <remarks>
            <note>
            Preferences may be ignored if this <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> provides a
            previously created <see cref="T:Awesomium.Core.WebSession"/>. For details, see <see cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataPath"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebSessionProvider.DataPath">
            <summary>
            Gets or sets the disk data path of this session, if any.
            </summary>
            <remarks>
            Leave this empty to create an in-memory <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            If another <see cref="T:Awesomium.Core.WebSession"/> using the same data path has previously been 
            created, the <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> will provide the previous session,
            instead of creating a new one. In this case, any preferences defined in <see cref="P:Awesomium.Windows.Forms.WebSessionProvider.Preferences"/>,
            are ignored.
            <p/>
            This prevents exceptions that would occur when more than one <see cref="T:Awesomium.Core.WebSession"/>s
            attempt to access the same data store. This feature also provides an easy way to
            re-use an <i>on-disk</i> <see cref="T:Awesomium.Core.WebSession"/> with multiple <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            instances residing on different containers: Just specify the same <see cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataPath"/>
            on all your <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/>s and they will all provide the same session.
            <p/>
            <b>For more details, read: 
            <a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebSessionProvider.Views">
            <summary>
            Gets a collection of <see cref="T:Awesomium.Core.IWebView"/> instances that this provider
            provides a <see cref="T:Awesomium.Core.WebSession"/> for.
            </summary>
            <remarks>
            <note>
            This collection cannot be edited programmatically.
            You can assign an instance of <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> to a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            in the Windows Forms Designer.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebSessionProvider.DataSources">
            <summary>
            Gets a collection of pairs of asset hosts and <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> instances.
            </summary>
            <remarks>
            The <see cref="P:Awesomium.Windows.Forms.DataSourceProvider.AssetHost"/> defined when adding
            a <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> to <see cref="T:Awesomium.Windows.Forms.DataSourceProviderCollection"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> will be bound to.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Forms.ControlSurface">
            <summary>
            Represents an <see cref="T:Awesomium.Core.ISurface"/> that renders the pixel buffer
            of a <see cref="T:Awesomium.Core.IWebView"/> instance, to a Windows Forms <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.ImageSurface">
            <summary>
            Represents an <see cref="T:Awesomium.Core.ISurface"/> that renders the pixel buffer of a <see cref="T:Awesomium.Core.WebView"/>,
            to an <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/>. You can then draw this image to a <see cref="T:System.Windows.Forms.Control"/>,
            or assign it to a <see cref="T:System.Windows.Forms.PictureBox"/>.
            </summary>
            <remarks>
            You can create and return an instance of this class, when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is
            being called. Usually, you can cache and return the same <see cref="T:Awesomium.Windows.Forms.ImageSurface"/> instance
            on multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls. The <see cref="T:Awesomium.Windows.Forms.ImageSurface"/> takes
            care of updating the <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/> to reflect the new surface size.
            <p/>
            <note>
            If you intend to draw the <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/> to a <see cref="T:System.Windows.Forms.Control"/>,
            make sure <see cref="P:System.Windows.Forms.Control.DoubleBuffered"/> is set to <c>true</c>,
            to prevent flickering.
            </note>
            <p/>
            <note type="caution">
            Once assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            <p/>
            When you are done with using an instance of this class, dispose it to release resources.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.ImageSurface.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ImageSurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ImageSurface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ImageSurface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.ImageSurface.Image">
            <summary>
            Gets the <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/> where the pixel buffer of a <see cref="T:Awesomium.Core.WebView"/>
            is being rendered.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.ControlSurface.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> class, 
            associating it with a Windows Forms control.
            </summary>
            <param name="control">
            A <see cref="T:System.Windows.Forms.Control"/> to associate with this instance.
            </param>
            <remarks>
            <note>
            This constructor is usually used by the Windows Forms designer.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.ControlSurface.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ControlSurface.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ControlSurface.OnPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Windows.Forms.AddressBox">
            <summary>
            Represents a Windows Forms TextBox that behaves as an address-box.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.AddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnNavigate(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.AddressBox.Navigate"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.AddressBox"/> class.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.RefreshAutoComplete">
            <summary>
            Updates the contents of the <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnGotFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnLostFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseEnter(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnVisibleChanged(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc />
        </member>
        <member name="E:Awesomium.Windows.Forms.AddressBox.Navigate">
            <summary>
            Occurs when the user presses ENTER, after typing
            a valid URL in the <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.AddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property based on the URL currently 
            loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            <p/>
            <note>
            You do not need to handle this event, if you assign
            a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Forms.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.AddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Multiline">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Text">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Font">
            <inheritdoc />
        </member>
        <member name="F:Awesomium.Windows.Forms.PromptForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.PromptForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.PromptForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.ToolStripAddressBox">
            <summary>
            Represents a text box in a <see cref="T:System.Windows.Forms.ToolStrip"/> that behaves as an address-box.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> property based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnBorderStyleChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnBorderStyleChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnHideSelectionChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnHideSelectionChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnModifiedChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnModifiedChanged&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnReadOnlyChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnReadOnlyChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnNavigate(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.ToolStripAddressBox.Navigate"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.AppendText(System.String)">
            <inheritdoc cref="M:System.Windows.Forms.TextBox.AppendText" />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Clear">
            <inheritdoc select='docs/doc[@for="ToolStripTextBox.Clear"]/*' />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.ClearUndo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ClearUndo&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Copy">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Copy&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Cut">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Cut&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.DeselectAll">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DeselectAll&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetCharFromPosition(System.Drawing.Point)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetCharFromPosition&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetCharIndexFromPosition(System.Drawing.Point)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetCharIndexFromPosition&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetFirstCharIndexFromLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetFirstCharIndexFromLine&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetFirstCharIndexOfCurrentLine">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetFirstCharIndexOfCurrentLine&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetLineFromCharIndex(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetLineFromCharIndex&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetPositionFromCharIndex(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetPositionFromCharIndex&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Paste">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Paste&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.ScrollToCaret">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ScrollToCaret&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Select(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Select&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.SelectAll">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectAll&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Undo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Undo&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetPreferredSize(System.Drawing.Size)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Forms.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BorderStyle">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.BorderStyle&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.CanUndo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.CanUndo&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.CharacterCasing">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.CharacterCasing&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.HideSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.HideSelection&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.Modified">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Modified&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.ReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ReadOnly&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectedText">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectedText&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectionLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectionLength&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectionStart">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectionStart&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.ShortcutsEnabled">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ShortcutsEnabled&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextLength&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextBoxTextAlign">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextBoxTextAlign&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.WordWrap">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.WordWrap&quot;]/*"/> 
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.BorderStyleChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.BorderStyleChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.HideSelectionChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.HideSelectionChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.ModifiedChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ModifiedChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.ReadOnlyChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ReadOnlyChanged&quot;]/*"/> 
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.TextBoxTextAlignChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextAlignChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.Navigate">
            <summary>
            Occurs when the user presses ENTER, after typing
            a valid URL in the <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextBox">
            <summary>
            Gets the hosted <see cref="T:Awesomium.Windows.Forms.AddressBox"/> control.
            </summary>
            <returns>
            The hosted <see cref="T:Awesomium.Windows.Forms.AddressBox"/> control.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.Text">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BackgroundImage">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BackgroundImageLayout">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.DefaultMargin">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DefaultMargin&quot;]/*"/> 
            <devdoc>
            Deriving classes can override this to configure a default size for their control. 
            This is more efficient than setting the size in the control's constructor. 
            </devdoc>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.DefaultSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DefaultSize&quot;]/*"/>
        </member>
        <member name="T:Awesomium.Windows.Forms.ContextMenuOpeningEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Windows.Forms.WebControlContextMenu.Opening"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Windows.Forms.ContextMenuOpeningEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Windows.Forms.ContextMenuOpeningEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Windows.Forms.WebControlContextMenu.Opening"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.ContextMenuOpeningEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that provides information 
            for creating and displaying the context menu.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.WebControlContextMenu">
            <summary>
            Predefined default context menu used with the Windows Forms <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.OnOpening(Awesomium.Windows.Forms.ContextMenuOpeningEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControlContextMenu.Opening"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/> class, 
            associating it with a container.
            </summary>
            <param name="container">
            An object implementing <see cref="T:System.ComponentModel.IContainer"/> to associate with this instance.
            </param>
            <remarks>
            <note>
            This constructor is usually used by the Windows Forms designer.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.Show(System.Windows.Forms.Control)">
            <summary>
            Positions and shows the <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/>.
            </summary>
            <param name="control">
            The control (typically, a <see cref="T:Awesomium.Windows.Forms.WebControl"/> or else the Windows Forms <see cref="T:System.Windows.Forms.Control"/> 
            where the pixel buffer of a <see cref="T:Awesomium.Core.WebView"/> is being rendered), that is the reference 
            point for the <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/> position.
            </param>
            <remarks>
            This method should generally be called, in response to a <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/> event.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            You cannot show a <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/> that has not been 
            assigned to an <see cref="T:Awesomium.Core.IWebView"/> instance (see <see cref="P:Awesomium.Windows.Forms.WebControlContextMenu.View"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.OnOpening(System.ComponentModel.CancelEventArgs)">
            <exclude />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.OnClosing(System.Windows.Forms.ToolStripDropDownClosingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControlContextMenu.OnItemClicked(System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControlContextMenu.Opening">
            <summary>
            Occurs when the <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/> control is opening.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControlContextMenu.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance (usually a <see cref="T:Awesomium.Windows.Forms.WebControl"/>),
            this <see cref="T:Awesomium.Windows.Forms.WebControlContextMenu"/> is currently assigned to.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.DataPakSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataSources"/>
        </member>
        <member name="T:Awesomium.Windows.Forms.DataSourceProvider">
            <summary>
            Represents the base class for Windows Forms <see cref="T:Awesomium.Core.Data.DataSource"/> providers.
            </summary>
            <remarks>
            <note>
            <see cref="N:Awesomium.Windows.Forms"/> includes providers for all the <b>Awesomium.NET</b> 
            <see cref="T:Awesomium.Core.Data.DataSource"/> types, available through <see cref="N:Awesomium.Core.Data"/>.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProvider.GetDataSource">
            <summary>
            Called by the <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/>, when a
            <see cref="T:Awesomium.Core.Data.DataSource"/> must be provided by this <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/>.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance that will be added to the
            <see cref="T:Awesomium.Core.WebSession"/> provided by a <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProvider.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Windows.Forms.DataSourceProvider.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProvider.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.DataSourceProvider.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.DataSourceProvider.AssetHost">
            <summary>
            Gets or sets the asset domain that the <see cref="T:Awesomium.Core.Data.DataSource"/> provided by this
            <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/>, will be bound to.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.DataSourceProvider.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.DataPakSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.DataPakSourceProvider.PakPath">
            <summary>
            Gets or sets the path to the PAK file used to load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.DataPakSourceProvider.Directory">
            <summary>
            Gets or sets a directory to create a PAK file from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.DataPakSourceProvider.UseExistingPakFile">
            <summary>
            Gets or sets if an existing PAK file in the specified
            <see cref="P:Awesomium.Windows.Forms.DataPakSourceProvider.Directory"/>, should be used.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.DataPakSourceProvider.IgnoreExtensions">
            <summary>
            Gets or sets a comma-separated string representing extensions
            of files that should be ignored in the specified <see cref="P:Awesomium.Windows.Forms.DataPakSourceProvider.Directory"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.DataSourceProviderCollection">
            <summary>
            Represents a collection of pairs of asset hosts and <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> instances.
            </summary>
            <seealso cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProviderCollection.GetKeyForItem(Awesomium.Windows.Forms.DataSourceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProviderCollection.InsertItem(System.Int32,Awesomium.Windows.Forms.DataSourceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProviderCollection.SetItem(System.Int32,Awesomium.Windows.Forms.DataSourceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProviderCollection.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProviderCollection.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.DataSourceProviderCollection.AddRange(Awesomium.Windows.Forms.DataSourceProvider[])">
            <summary>
            Adds an array of <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> to the collection.
            </summary>
            <param name="items">
            An array of <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/>.
            </param>
        </member>
        <member name="T:Awesomium.Windows.Forms.DirectoryDataSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.DirectoryDataSourceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.DirectoryDataSourceProvider"/> class.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.DirectoryDataSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Directory">
            <summary>
            Gets or sets the directory this data source will load resources from.
            </summary>
            <remarks>
            <note>
            If no path is specified, the current executable's directory will be used.
            This should not be your intention therefore you must always set this to a valid
            existing path, containing resources.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.IgnoreExtensions">
            <summary>
            Gets or sets a comma-separated string representing extensions
            of files that should be ignored, when resources are preloaded from the 
            specified <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Directory"/>.
            </summary>
            <remarks>
            <note>
            This is only meaningful when <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Preload"/> is <c>true</c>. If <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Preload"/> is <c>false</c>,
            any matching resource requested, will be provided to the requesting page, even if the resource file
            has an extension included in the <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.IgnoreExtensions"/> comma-separated list.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.MaximumSize">
            <summary>
            Gets the maximum size of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instance should use to cache resources in memory. Specify <c>0</c>, to prevent
            caching resources in-memory.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Preload">
            <summary>
            Gets or sets if resources from the directory and its subdirectories, should be pre-loaded to memory.
            </summary>
            <remarks>
            <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Preload"/> will load all the available resources from the
            directory and its subdirectories to memory, ignoring files with the
            specified <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.IgnoreExtensions"/> and until it reaches the specified
            <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.MaximumSize"/>.
            <p/>
            This operation is performed asynchronously and the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            can still be used while files are being loaded in memory. When pre-loading
            completes, <see cref="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete"/> is fired synchronously.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.IsInMemory">
            <summary>
            Gets if this is an in-memory data source provider.
            </summary>
            <remarks>
            In-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instances, cache the requested
            files in memory either when they are first requested, or by using
            <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.Preload"/>. In subsequent requests for the same resource,
            the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> loads the resource from memory
            instead of reading from disk. This can significantly improve performance.
            <note>
            An in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> will stop caching resources
            to memory when the specified <see cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.MaximumSize"/> has been reached.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.DirectoryDataSourceProvider.MaximumSize"/>
        </member>
        <member name="T:Awesomium.Windows.Forms.ResourceDataSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Forms.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Forms.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ResourceDataSourceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Forms.ResourceDataSourceProvider"/> class.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.ResourceDataSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.ResourceDataSourceProvider.Type">
            <summary>
            Gets or sets the type of application resources that this
            <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> looks for.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.ResourceDataSourceProvider.Assembly">
            <summary>
            Gets or sets the path to the assembly that contains the resources.
            If no assembly is specified, resources are loaded from the current
            executable (default).
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Forms.LoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.CreateCompatibleDC(System.IntPtr)">
            <summary>
            CreateCompatibleDC
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.DeleteDC(System.IntPtr)">
            <summary>
            DeleteDC
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            SelectObject
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.DeleteObject(System.Runtime.InteropServices.HandleRef)">
            <summary>
            DeleteObject
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            CreateCompatibleBitmap
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Awesomium.Windows.Forms.GdiAPI.TernaryRasterOperations)">
            <summary>
            BitBlt
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.GdiAPI.TernaryRasterOperations">
            <summary>
            Enumeration for the raster operations used in BitBlt.
            In C++ these are actually #define. But to use these
            constants with C#, a new enumeration type is defined.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.Logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.Utilities">
            <summary>
            Utility class providing helper methods that can be used by Windows Forms applications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.SetCulture(System.Threading.Thread,System.Globalization.CultureInfo)">
            <summary>
            Sets the culture for the specified <paramref name="thread"/>.
            </summary>
            <param name="thread">
            The <see cref="T:System.Threading.Thread"/> to set the culture for. This is usually the UI thread.
            </param>
            <param name="cultureInfo">
            A <see cref="T:System.Globalization.CultureInfo"/> instance representing the locale to apply to 
            the <paramref name="thread"/>.
            </param>
            <remarks>
            This helper method sets the main culture and UI culture for the specified
            <paramref name="thread"/>.
            <p/>
            <note type="caution">
            The method must be called from the UI thread, before <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            (if explicitly called) or before the creation of the first <see cref="T:Awesomium.Core.WebSession"/>
            or <see cref="T:Awesomium.Core.IWebView"/> instance (<see cref="T:Awesomium.Windows.Forms.WebControl"/> or other).
            </note>
            <p/>
            The current culture affects the locale of Awesomium.NET UI elements (such as
            context menus) and the locale of integrated JavaScript frameworks (such as
            PDF.js).
            <note>
            The current culture is also returned from the JavaScript <c>navigator.language</c>
            property.
            </note>
            </remarks>
            <returns>
            <c>true</c> if the culture was successfully set; <c>false</c> otherwise. The method
            can return <c>false</c> if the specified <paramref name="thread"/> is not valid.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorType)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="e">
            The data provided to <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event handler.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a Windows Forms key-down or key-up event.
            </summary>
            <param name="e">
            The Windows Forms key-down or key-up event arguments.
            </param>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-down or key-up event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a Windows Forms key-press event.
            </summary>
            <param name="e">
            The Windows Forms key-press event arguments.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-press event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCurrentModifiers">
            <summary>
            Gets the modifiers currently pressed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetMouseButton(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.MouseButtons"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.MouseButton"/>.
            </summary>
            <param name="button">
            The Awesomium button.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.MouseButtons"/>, or <see cref="F:Awesomium.Core.MouseButton.Left"/> if <see cref="F:System.Windows.Forms.MouseButtons.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.ToRectangle(Awesomium.Core.AweRect)">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="aweRect">
            An <see cref="T:Awesomium.Core.AweRect"/> value representing an Awesomium rectangle.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Rectangle"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetMessageBoxButtons(Awesomium.Core.JSDialogFlags)">
            <summary>
            Gets a <see cref="T:System.Windows.Forms.MessageBoxButtons"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </summary>
            <param name="flags">
            A <see cref="T:Awesomium.Core.JSDialogFlags"/> value representing the Javascript dialog flags.
            </param>
            <returns>
            A <see cref="T:System.Windows.Forms.MessageBoxButtons"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetMessageBoxIcon(Awesomium.Core.JSDialogFlags)">
            <summary>
            Gets a <see cref="T:System.Windows.Forms.MessageBoxIcon"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </summary>
            <param name="flags">
            A <see cref="T:Awesomium.Core.JSDialogFlags"/> value representing the Javascript dialog flags.
            </param>
            <returns>
            A <see cref="T:System.Windows.Forms.MessageBoxIcon"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </returns>
        </member>
    </members>
</doc>
